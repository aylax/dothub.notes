#+TITLE: Re:Zero - DEATH OR KISS - . Rust
#+KEYWORDS: rust
#+DATE: 2021-08-27
#+AUTHOR: aylax zhou
#+EMAIL: zhoubye@foxmail.com
#+DESCRIPTION: A description of rust
#+OPTIONS: author:t creator:t timestamp:t email:t

** Getting started
:PROPERTIES:
:CUSTOM_ID: GettingStarted
:END:

Let's start our rust journey!

*** Installation
:PROPERTIES:
:CUSTOM_ID: Installation
:END:

=rustup= is a command line tool for managing =Rust= versions and associated tools.

**** Install rustup on Linux or macOS
We can install =rustup= use the command below.
#+begin_src sh
curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
#+end_src

**** Update and Uninstall
we can update rustup use the command below.
#+begin_src sh
rustup update
#+end_src

To uninstall =Rust= and =rustup=, run the following script.
#+begin_src sh
rustup self uninstall
#+end_src

**** Local Documentation
The installation of =Rust= also includes a copy of the documentation. So you can
read it offline. Just type the command below.
#+begin_src sh
rustup doc
#+end_src

*** First Example
:PROPERTIES:
:CUSTOM_ID: FirstExample
:END:

After installed =Rust=, let's write a little program.

**** Write and Run a Rust Program

create a file named =main.rs=, and type something.
#+begin_src rust
fn main() {
  println!("hello world!");
}
#+end_src

and then compile it by =rustc=
#+begin_src sh
rustc main.rs
#+end_src

finally you can run the binary file.
#+begin_src sh
./main
#+end_src

*** Hello Cargo
:PROPERTIES:
:CUSTOM_ID: Hello Cargo
:END:

=Cargo= is Rust's build system and package manager.

**** Create a project with Cargo
Let's create a new project using cargo.
#+begin_src sh
cargo new first_example --bin
cd first_example
#+end_src

It has also initialized as a git repository along with a gitignore file.
Git files won't be generated if you run =cargo new= within an existed repo.
You can override this behavior by using =cargo new --vcs=git=.
#+begin_src
Note: Git is a common version control system. you can change =cargo new= to
use a different version control system or no version control system by using
the =--vcs= flag. Run =cargo new --help= to see the available options.
#+end_src

**** Build and Run with Cargo.
Now let's build our project.
#+begin_src sh
cargo build
#+end_src

This command creates an executable file in =./target/debug/=. You can run the
executable with the command.
#+begin_src sh
cargo run
#+end_src

Cargo also provides a command called =cargo check=. This command quickly checks
your code to make sure it compiles but doesn't produce an executable.

**** Building for Release
When our project is finally ready for release, we can use =cargo build --release=
to compile it with optimizations. This command will create an executable in
=./target/release/= instead of =./target/debug/=. The optimizations make our Rust code
run faster, but turning them on lengthens the time it takes for our program to compile.

**** Update a Crate to Get a New Version
When you do want to update a crate, Cargo provides another command, =cargo update=. Which will
ignore the =Cargo.lock= file and figure out all the latest versions that fit versions in Cargo.toml.
If that works, Cargo will write those versions to the =Cargo.lock= file.

** Common Concepts
:PROPERTIES:
:CUSTOM_ID: CommonConcepts
:END:

This chapter covers concepts that appear in almost every programming language and how they work in Rust.
Specifically, we'll learn about variables, basic types, functions, comments, and control flow.

*** Variables and Mutability
:PROPERTIES:
:CUSTOM_ID: VariablesAndMutability
:END:

By default variables are immutable and we can use =let mut= to make variables mutable. When a variables
immutable, once a value is bound to a name, we can't change that value. Here's error code below.
#+begin_src rust
fn main() {
 let x = 5;
 x = 6;
 println!("The value of x is: {}", x);
}
#+end_src

Save and run it using =cargo run=. You should receive an error message. The error message indicates that
the cause of the error is that you =can not assign twice to immutable variable x=, because you tried to
assign a second value to the immutable variable.

**** Differences Between Variables and Constants
Declare constants using the =const= keyword instead of =let=. The Constants type must be annotated. Constants
can be declared in any scope, including the global scope. Constants may be set only to a constant expression,
not the result of a function call or any other value that could only be computed at runtime.

**** Shadowing
You can declare a new variable with the same name as a previous variable. It means that the first variable is
shadowed by the second.
#+begin_src rust
fn main {
  let x = 5;
  let x = 12;
}
#+end_src

Shadowing is different from marking a variable as =mut=, because we'll get a compile-time error if we accidentally
try to reassign to this variable without using the =let= keyword.

The other difference between =mut= and shadowing is that because we're effectively creating a new variable when we
use the =let= keyword again, we can change the type of the value but reuse the same name.

*** Data Types
:PROPETIES:
:CUSTOM_ID: DataTypes
:END:

Every value in Rust is of a certain data type. which tells Rust what kind of data is being specified so it knows
how to work with that data. We'll look at two data type subsets: =scalar= and =compound=.

**** Scalar Types
A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers,
booleans, and characters.

*Integer Types*

An integer is a number without a fractional component.

_Integer Types in Rust_

|   Length   |   Signed   |  Unsigned  |
|   8-bit    |    i8      |    u8      |
|   16-bit   |    i16     |    u16     |
|   32-bit   |    i32     |    u32     |
|   64-bit   |    i64     |    u64     |
|   128-bit  |    i128    |    u128    |
|   arch     |    isize   |    usize   |

_Integer Literals in Rust_

|  Literals  |  Example   |
|  Decimal   |    98_22   |
|  Hex       |    0xff    |
|  Octal     |    0o22    |
|  Binary    |    0b11    |
|  Byte(u8)  |    b'A'    |


*Floating-Point Types*

Rust also has two primitive types for floating-point numbers, which are numbers with dicimal points.
Rust's floating-point types are =f32= and =f64=.

*Boolean Type*

A boolean type in rust has two possible values: =true= and =false=. Booleans are one byte in size.
#+begin_src rust
let is_true: bool = true;
#+end_src

*Character Type*

char literals are specified with single quotes.
#+begin_src rust
let c = 'z';
#+end_src

**** Compound Types
Compound types can group multiple values into one type. Rust has two primitive compound types: =tuples= and =arrays=.

*Tuple Type*

A tuple is a general way of grouping together a numbers of values with a variety of types into one compound type.
Tuples have a fixed length: once declared, they can not grow or shrink in size.
#+begin_src rust
fn main {
  let tup: (i32, f64, u8) = (500, 6.4, 1);
  let (x, y, z) = tup;
  println!("tup.first is {}", tup.0);
}
#+end_src

*Array Type*

Another way to have a collection of multiple values is with an array. Unlike a tuple, every element of an
array must have the same type. Arrays also have a fixed length, like tuples.
#+begin_src rust
fn main() {
  let arr = [1, 2, 3];
  let brr: [i32; 4] = [1, 2, 3, 4];
  println!("arr[0] is {}", arr[0]);
}
#+end_src

*** Functions
Function definitions in Rust start with =fn= and have a set of parentheses after the function name.
The curly brackets tell the compiler where the function body begins and ends.
#+begin_src rust
fn foo(a: i32) -> i32 {
  a + 1
}
fn bar() {}
fn foobar() -> ! {}
#+end_src

Function body is made up of a series of statements optionally ending in an expression. Statements are
instructions that perform some action and do not return a value. Expressions evalute to a resulting value.
#+begin_src rust
fn main() {
  let y = 6; // statement
  y + 1 // expression
}
#+end_src

*** Comments
In Rust, the idiomatic comment style starts a comment with two slashes, and
the comment continues until the end of the line. Comments can also be placed
at the end of lines containing code.
#+begin_src rust
// main.rs
fn main() {
  let x = 3; // this is x;
}
#+end_src

Also, rust has documentation comments which use three slashes instead of two and
support markdown notation for formatting the text. Place documentation comments
just before the item they're documenting.
#+begin_src rust
/// This is Documentation comment
/// # Examples
/// ```rust
/// let a = 5;
/// assert_eq!(a, a);
///```

pub fn add_one(x: i32) -> i32 {
  x + 1
}
#+end_src

For convenience, running =cargo doc --open= will build the HTML for your current
crate's documentation and open the result in a web browser.

*** Control Flow

**** If Expression
An if expression allows you to branch your code depending on conditions. If this
condition is met, run this block of code, otherwise not run it.
#+begin_src rust
fn main() {
  let number = 12;
  let result = if number < 6 {
    5 
  } else if number > 8 {
    6
  } else {
    9
  };
}
#+end_src

**** Repetition With Loops
It's often useful to excute a block of code more than once. Rust has three kinds
of loops: =loop=, =while=, and =for=.
#+begin_src rust
fn main() {
  loop {
    println!("again!");
  }
  
  while true {
    println!("always true!");
  }

  for element in [1, 2, 3].iter() {
    println!("the value is: {}", element);
  }
  
  for num in (0..3).rev() {
    println!("num is {}", num);
  }
}
#+end_src

** Rust Ownership
Owner ship is Rust's most unique feature, and it enables Rust to make memory
safety guarantees  with needing a garbage collector.

Keeping tracking of what part of code are using what data on the heap, minimi-
-zing the amount of duplicate data on the heap, and cleaning up unused data on
the heap are all problems that ownership addresses.

_Ownership Rules_

- Each value in Rust has a variable that's called its owner.
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.

_Variable Scope_

The variable =s= refers to a string literal, where the value of the string is
hardcoded into the text of our program. The variable is valid from the point at
which it's declared until the end of the current scope.
#+begin_src rust
fn main() { // s is not valid here, it's not yet declared
  {
    let s = "a"; // s is valid from this point forward
    // do stuff with s
  } // this scope is now over and s is no longer valid
}
#+end_src

In other words, there are two important points in time here:
- When =s= comes into scope, it is valid.
- It remains valid until it goes out of scope.  

_Stack Only Data: Copy_

Any group of simple scalar values can implement Copy, and nothin that requires
allocation or is soem form of resource can implement Copy. If implements Copy,
it can not implement Drop.

Here are some of the types that implement Copy:
- All the integer types, such as =i32=.
- The Boolean type, =bool=, with values =true= and =false=.
- All the floating point types, such as =f64=.
- The character type, =char=.
- Tuples, if they only contain types that also implement =Copy=. For example,
  =(i32, i32)= implements =Copy=, but =(i32, String)= does not.

_Return Values and Scope_

Return values can also transfer ownership.
#+begin_src rust
fn give_ownership() -> String {
  String::from("hello")
}
fn main() {
  let s = give_ownership();
  println("The value of s is {}", s);
}
#+end_src

*** References and Borrowing
We use =&v= to create a reference that refers to the value of =v=. If we want to
create a mutable reference, we use =&mut v=.
#+begin_src rust
fn main() {
  let mut s = String::from("a");
  let r1 = &mut s;
}
#+end_src

_The Rules of Reference_

- At any given time, you can have either one mutable reference or any number of
  immutable references.
- References must always be valid.


*** The Slice Type
Another data type that does not have ownership is the slice. Slices let you
reference a contiguous sequence of elements in a collection rather than the
whole collection.

Here's the example of String Slices =&str=:
#+begin_src rust
let s = String:: from("hello world");
let s1 = &s[..3]; // [0, 3)
let s2 = &s[2..]; // [2, len)
let s3 = &s[1..3]; // [1, 3)
let s4 = &s[..]; // [0, len)
#+end_src


** Using Structs to Structure Related Data
A struct, or structure, is a custom data type that lets you name  and package
together multiple related values that make up a meaningful group.

*** Defining and Instantiating Structs
Structs are similar to tuples. Like tuples, the pieces of a struct can be diff-
-erent types. Unlike with tupples, you'll name each piece of data so it's clear
what the values mean. As a result of these names, structs are more flexible than
tuples: you don't have to rely on the order of the data to specify or access the
values of an instance.
#+begin_src rust
struct Person; // empty struct

Struct Color(i32, i32, i32); // tuple struct

struct User {
  name: String,
  email: String,
  age: u8,
}

fn main() {
  let mut user1 = User {
    name: String::from("z"),
    email: String::from("xyz@example.com"),
    age: 12,
  };
  user1.age = 13;
}
#+end_src

We also can create instances from other instances with struct update syntax.
#+begin_src rust
let user2 = User {
  name: String::from("q"),
  ...user1
};
#+end_src


_Unit-Like structs without and fields._

Unit-like structs can be useful in situations in which you need to implement
on some type but don't have any data that you want to store in the type itself.

_Ownership of struct Data_

In the =User= struct definition, we used the owned =String= type rather than the =&str=
String slice type. This is a deliberate choice because we want instances of this
struct to own all of this data and for that data to be valid for as long as the
entire struct is valid.


*** Method Syntax

Methods are similar to functions: they're declared with the =fn= keyword and their
name, they can have parameters and a return value, and they contain some code
that is run when they're called from somewhere else.

But, methods are different form functions in that they're defined within the con-
-text of a struct(or of an enum or a triat object), and their first parameters is
always =self=, which represents the instance of the struct the method is being
called on.


